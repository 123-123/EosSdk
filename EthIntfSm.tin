// Copyright (c) 2013 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

#include <Tac/Tracing.h>

#include "EosSdk/EosSdk.h"
#include "SDKInternal.h"
#include "EnumCast.h"

DEFAULT_TRACE_HANDLE( "EosSdkEthIntfSm" )

namespace EOS {

AdminDisabledReason convertAdminDisabledReason( const Tac::String& reason ) {
   // See IntfSM::handleStateChange in Intf/SysdbErrdisableIntf.tin
   if (reason.empty()) {
      return reasonEnabled;
   } else if (reason == "admin") {
      return reasonAdmin;
   } else if (reason == "errdisabled") {
      return reasonErrDisabled;
   } else if (reason == "inactive") {
      return reasonInactive;
   }
   return reasonUnknown;
}

static EOS::EthAddr convert( Arnet::EthAddr addr ) {
   return EOS::EthAddr( addr.word0(), addr.word1(), addr.word2() );
}

static EOS::IntfId convert( Arnet::IntfId intfId ) {
   return EOS::IntfId( intfId.stringValue().stdString() );
}

void EthIntfConfigSm::handleDescription() {
   handler()->onDescription( convert( intfId() ),
                             ethIntfConfig()->description().stdString() );
}

void EthIntfConfigSm::handleAdminEnabled() {
   handler()->onAdminEnabled( convert( intfId() ),
                              ethIntfConfig()->adminEnabled() );
}

void EthIntfConfigSm::handleAdminDisabledReason() {
   AdminDisabledReason reason =
      convertAdminDisabledReason( ethIntfConfig()->enabledStateReason() );
   handler()->onAdminDisabledReason( convert( intfId() ), reason );
}

void EthIntfStatusSm::handleOperStatus() {
   handler()->onOperStatus( convert( intfId() ),
                            enum_cast<OperStatus>( ethIntfStatus()->operStatus() ) );
}

void EthPhyIntfConfigSm::handleAddr() {
   handler()->onAddr( convert( intfId() ), convert( ethPhyIntfConfig()->addr() ) );
}

void EthPhyIntfConfigSm::handleLinkModeLocal() {
   handler()->onLinkModeLocal( convert( intfId() ), enum_cast<EthLinkMode>(
         ethPhyIntfConfig()->linkModeLocal() ) );
}

void EthPhyIntfConfigSm::handleLoopbackMode() {
   handler()->onLoopbackMode( convert( intfId() ), enum_cast<LoopbackMode>(
         ethPhyIntfConfig()->loopbackMode() ) );
}

void EthPhyIntfConfigSm::handleTimestampMode() {
   handler()->onTimestampMode( convert( intfId() ), enum_cast<EthTimestampMode>(
         ethPhyIntfConfig()->timestampMode() ) );
}

void SdkSm::handleEthIntfConfigDir( Arnet::IntfId intfId ) {
   TRACE8( __PRETTY_FUNCTION__ << " intfId=" << intfId );
}

void SdkSm::handleEthIntfStatusDir( Arnet::IntfId intfId ) {
   TRACE8( __PRETTY_FUNCTION__ << " intfId=" << intfId );
   Interface::EthIntfStatus::PtrConst intfStatus =
      ethIntfStatusDir()->intfStatus( intfId );
   EOS::IntfId sdkIntfId = convert( intfId );
   if ( intfStatus ) {
      Interface::EthIntfConfig::PtrConst intfConfig =
         ethIntfConfigDir()->intfConfig( intfId );
      assert( intfConfig );
      IntfHandler* intfHandler =
         handlers()->handleIntfCreation( sdk()->intfStatus( sdkIntfId ) );
      if ( intfHandler ) {
         TRACE7( __PRETTY_FUNCTION__ << " Created nested SM for " << intfId );
         ethIntfConfigSmIs( intfHandler, intfId, intfConfig );
         ethIntfStatusSmIs( intfHandler, intfId, intfStatus );
      }
   } else {
      auto sm = ethIntfConfigSm( intfId );
      if ( sm ) {
         TRACE7( __PRETTY_FUNCTION__ << " Deleting nested SM for " << intfId );
         sm->handler()->onDeletion( sdkIntfId );
         ethIntfConfigSmDel( intfId );
         ethIntfStatusSmDel( intfId );
      }
   }
}

void SdkSm::handleEthPhyIntfConfigDir( Arnet::IntfId intfId ) {
   TRACE8( __PRETTY_FUNCTION__ << " intfId=" << intfId );
}

void SdkSm::handleEthPhyIntfStatusDir( Arnet::IntfId intfId ) {
   TRACE8( __PRETTY_FUNCTION__ << " intfId=" << intfId );
   Interface::EthPhyIntfStatus::PtrConst intfStatus =
      ethPhyIntfStatusDir()->intfStatus( intfId );
   EOS::IntfId sdkIntfId = convert( intfId );
   if ( intfStatus ) {
      Interface::EthPhyIntfConfig::PtrConst intfConfig =
         ethPhyIntfConfigDir()->intfConfig( intfId );
      assert( intfConfig );
      EthPhyIntfHandler* intfHandler =
         handlers()->handleEthPhyIntfCreation( sdk()->ethIntfStatus( sdkIntfId ) );
      if ( intfHandler ) {
         TRACE7( __PRETTY_FUNCTION__ << " Created nested SM for " << intfId );
         ethPhyIntfConfigSmIs( intfHandler, intfId, intfConfig );
         ethPhyIntfStatusSmIs( intfHandler, intfId, intfStatus );
      }
   } else {
      auto sm = ethPhyIntfConfigSm( intfId );
      if ( sm ) {
         TRACE7( __PRETTY_FUNCTION__ << " Deleting nested SM for " << intfId );
         sm->handler()->onDeletion( sdkIntfId );
         ethPhyIntfConfigSmDel( intfId );
         ethPhyIntfStatusSmDel( intfId );
      }
   }
}

}
